## Export of "larger" Sql Server Blob to file
## with GetBytes-Stream.
# Configuration data
$Server = "SQL04\MSSQL";         # SQL Server Instance.
$Database = "papersave";
$Dest = "C:\Users\sunrise_abird\Desktop\VendorDocuments\";             # Path to export to.
$bufferSize = 8192;               # Stream buffer size in bytes.
# Select-Statement for name &amp; blob
# with filter.
$Sql = "select case
	when d.FileName = 'Vendor .Pdf' 
		then CONCAT(host.parentid,' Vendor .Pdf')
	else d.filename
	end AS FILENAME, content
from papersave.dbo.pdfcontent t
join papersave.dbo.document d  
	on t.ID = d.Content_ID and d.MimeType_ID = 2
join papersave.dbo.HostApplicationLocalData host
	on host.ID = d.HostApplicationLocalData_ID
join gwc.dbo.PM00200 vt
	on vt.vendorid = host.ParentID
where d.removed = 0
	and DocumentType_ID = 6
	and vt.VENDSTTS = 1";            
 
# Open ADO.NET Connection
$con = New-Object Data.SqlClient.SqlConnection;
$con.ConnectionString = "Data Source=$Server;" +
                        "Integrated Security=True;" +
                        "Initial Catalog=$Database";
$con.Open();            
 
# New Command and Reader
$cmd = New-Object Data.SqlClient.SqlCommand $Sql, $con;
$rd = $cmd.ExecuteReader();            
 
# Create a byte array for the stream.
$out = [array]::CreateInstance('Byte', $bufferSize)            
# Looping through records
While ($rd.Read())
{
    Write-Output ("Exporting: {0}" -f $rd.GetString(0));
    # New BinaryWriter
    $fs = New-Object System.IO.FileStream ($Dest + $rd.GetString(0)), Create, Write;
    $bw = New-Object System.IO.BinaryWriter $fs;            
 
    $start = 0;
    # Read first byte stream
    $received = $rd.GetBytes(1, $start, $out, 0, $bufferSize - 1);
    While ($received -gt 0)
    {
       $bw.Write($out, 0, $received);
       $bw.Flush();
       $start += $received;
       # Read next byte stream
       $received = $rd.GetBytes(1, $start, $out, 0, $bufferSize - 1);
    }            
 
    $bw.Close();
    $fs.Close();
}            
 
# Closing &amp; Disposing all objects
$fs.Dispose();
$rd.Close();
$cmd.Dispose();
$con.Close();            
 

## Export of "larger" Sql Server Blob to file
## with GetBytes-Stream.
# Configuration data
$Server = "SQL04\MSSQL";         # SQL Server Instance.
$Database = "papersave";
$Dest = "C:\Users\sunrise_abird\Desktop\TestOutputfile\";             # Path to export to.
$bufferSize = 8192;               # Stream buffer size in bytes.
# Select-Statement for name &amp; blob
# with filter.
$Sql = "select case
	when d.FileName = 'Vendor .Pdf' 
		then CONCAT(host.parentid,' Vendor .Pdf')
	else d.filename
	end AS FILENAME, content
from papersave.dbo.excelcontent t
join papersave.dbo.document d  
	on t.ID = d.Content_ID and d.MimeType_ID = 3
join papersave.dbo.HostApplicationLocalData host
	on host.ID = d.HostApplicationLocalData_ID
join gwc.dbo.PM00200 vt
	on vt.vendorid = host.ParentID
where d.removed = 0
	and DocumentType_ID = 6
	and vt.VENDSTTS = 1";            
 
# Open ADO.NET Connection
$con = New-Object Data.SqlClient.SqlConnection;
$con.ConnectionString = "Data Source=$Server;" +
                        "Integrated Security=True;" +
                        "Initial Catalog=$Database";
$con.Open();            
 
# New Command and Reader
$cmd = New-Object Data.SqlClient.SqlCommand $Sql, $con;
$rd = $cmd.ExecuteReader();            
 
# Create a byte array for the stream.
$out = [array]::CreateInstance('Byte', $bufferSize)            
# Looping through records
While ($rd.Read())
{
    Write-Output ("Exporting: {0}" -f $rd.GetString(0));
    # New BinaryWriter
    $fs = New-Object System.IO.FileStream ($Dest + $rd.GetString(0)), Create, Write;
    $bw = New-Object System.IO.BinaryWriter $fs;            
 
    $start = 0;
    # Read first byte stream
    $received = $rd.GetBytes(1, $start, $out, 0, $bufferSize - 1);
    While ($received -gt 0)
    {
       $bw.Write($out, 0, $received);
       $bw.Flush();
       $start += $received;
       # Read next byte stream
       $received = $rd.GetBytes(1, $start, $out, 0, $bufferSize - 1);
    }            
 
    $bw.Close();
    $fs.Close();
}            
 
# Closing &amp; Disposing all objects
$fs.Dispose();
$rd.Close();
$cmd.Dispose();
$con.Close();            
 
## Export of "larger" Sql Server Blob to file
## with GetBytes-Stream.
# Configuration data
$Server = "SQL04\MSSQL";         # SQL Server Instance.
$Database = "papersave";
$Dest = "C:\Users\sunrise_abird\Desktop\TestOutputfile\";             # Path to export to.
$bufferSize = 8192;               # Stream buffer size in bytes.
# Select-Statement for name &amp; blob
# with filter.
$Sql = "select case
	when d.FileName = 'Vendor .Pdf' 
		then CONCAT(host.parentid,' Vendor .Pdf')
	else d.filename
	end AS FILENAME, content
from papersave.dbo.TIFFContent t
join papersave.dbo.document d  
	on t.ID = d.Content_ID and d.MimeType_ID = 1
join papersave.dbo.HostApplicationLocalData host
	on host.ID = d.HostApplicationLocalData_ID
join gwc.dbo.PM00200 vt
	on vt.vendorid = host.ParentID
where d.removed = 0
	and DocumentType_ID = 6
	and vt.VENDSTTS = 1";            
 
# Open ADO.NET Connection
$con = New-Object Data.SqlClient.SqlConnection;
$con.ConnectionString = "Data Source=$Server;" +
                        "Integrated Security=True;" +
                        "Initial Catalog=$Database";
$con.Open();            
 
# New Command and Reader
$cmd = New-Object Data.SqlClient.SqlCommand $Sql, $con;
$rd = $cmd.ExecuteReader();            
 
# Create a byte array for the stream.
$out = [array]::CreateInstance('Byte', $bufferSize)            
# Looping through records
While ($rd.Read())
{
    Write-Output ("Exporting: {0}" -f $rd.GetString(0));
    # New BinaryWriter
    $fs = New-Object System.IO.FileStream ($Dest + $rd.GetString(0)), Create, Write;
    $bw = New-Object System.IO.BinaryWriter $fs;            
 
    $start = 0;
    # Read first byte stream
    $received = $rd.GetBytes(1, $start, $out, 0, $bufferSize - 1);
    While ($received -gt 0)
    {
       $bw.Write($out, 0, $received);
       $bw.Flush();
       $start += $received;
       # Read next byte stream
       $received = $rd.GetBytes(1, $start, $out, 0, $bufferSize - 1);
    }            
 
    $bw.Close();
    $fs.Close();
}            
 
# Closing &amp; Disposing all objects
$fs.Dispose();
$rd.Close();
$cmd.Dispose();
$con.Close();            
 